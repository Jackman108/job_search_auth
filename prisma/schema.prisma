generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  roles     Role[]
  provider  Provider?
  isBlocked Boolean   @default(false) @map("is_blocked")
  Token     Token[]
  Resumes   Resume[]

  @@map("users")
}

model Profile {
  id                       Int      @id @default(autoincrement())
  firstName                String   @map("first_name")
  lastName                 String   @map("last_name")
  avatar                   String?
  balance                  Float    @default(0.0)
  spinCount                Int      @default(0) @map("spin_count")
  successfulResponsesCount Int      @default(0) @map("successful_responses_count")
  currentStatus            String   @map("current_status")
  userId                   String   @unique @map("user_id")
  updatedAt                DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Resume {
  id                    Int              @id @default(autoincrement())
  userId                String           @map("user_id")
  fullName              String           @map("full_name")
  position              String?
  employmentType        String?          @map("employment_type")
  workSchedule          String?          @map("work_schedule")
  travelTime            String?          @map("travel_time")
  businessTripReadiness Boolean          @map("business_trip_readiness")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts              Contact[] 
  workExperience        WorkExperience[] 
  skills                Skill[] 

  @@map("resumes")
}

model Contact {
  id           Int     @id @default(autoincrement())
  resumeId     Int     @map("resume_id")
  phone        String?
  email        String?
  personalSite String? @map("personal_site")
  resume       Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  resumeId    Int       @map("resume_id")
  companyName String    @map("company_name")
  position    String
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  description String?
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("work_experience")
}

model Skill {
  id               Int     @id @default(autoincrement())
  resumeId         Int     @map("resume_id")
  skillName        String  @map("skill_name")
  proficiencyLevel String? @map("proficiency_level")
  resume           Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Token {
  token     String   @unique
  exp       DateTime
  userId    String
  userAgent String   @map("user_agent")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  YANDEX
}
