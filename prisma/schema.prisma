generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  roles     Role[]
  provider  Provider?
  isBlocked Boolean   @default(false) @map("is_blocked")
  Token     Token[]
  profile   Profile?

  // Связь с Vacancy
  vacancies Vacancy[]

  @@map("users")
}

model Profile {
  id                        Int       @id @default(autoincrement())
  firstName                 String
  lastName                  String
  avatar                    String?
  balance                   Float     @default(0.0)
  spinCount                 Int       @default(0)
  successfulResponsesCount  Int       @default(0)
  currentStatus             String
  resumes                   Resume[]
  messages                  Message[]
  userId                    String    @unique
  user                      User      @relation(fields: [userId], references: [id])

  // Связь с Vacancy
  vacancies                 Vacancy[]

  updatedAt                 DateTime  @updatedAt @map("updated_at")

  @@map("profiles")
}

model Vacancy {
  id            BigInt   @id @default(autoincrement()) @map("id")
  titleVacancy  String   @map("title_vacancy")
  urlVacancy    String   @map("url_vacancy")
  titleCompany  String   @map("title_company")
  urlCompany    String   @map("url_company")
  vacancyStatus String   @map("vacancy_status")
  responseDate  DateTime @map("response_date")

  // Связь с User
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  // Связь с Profile
  profileId     Int
  profile       Profile  @relation(fields: [profileId], references: [id])

  @@map("vacancies")
}

model Resume {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  profileId   Int
  profile     Profile  @relation(fields: [profileId], references: [id])

  @@map("resumes")
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  read        Boolean  @default(false)
  profileId   Int
  profile     Profile  @relation(fields: [profileId], references: [id])

  @@map("messages")
}

model Token {
  token     String   @unique
  exp       DateTime
  userId    String
  userAgent String   @map("user_agent")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  YANDEX
}
